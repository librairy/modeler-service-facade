/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package es.upm.oeg.librairy.service.modeler.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Inference extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Inference\",\"namespace\":\"es.upm.oeg.librairy.service.modeler.facade.model\",\"fields\":[{\"name\":\"vector\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"default\":[]},{\"name\":\"topics\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TopicSummary\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"default\":-1},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<java.lang.Double> vector;
   private java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary> topics;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Inference() {}

  /**
   * All-args constructor.
   */
  public Inference(java.util.List<java.lang.Double> vector, java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary> topics) {
    this.vector = vector;
    this.topics = topics;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vector;
    case 1: return topics;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vector = (java.util.List<java.lang.Double>)value$; break;
    case 1: topics = (java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vector' field.
   */
  public java.util.List<java.lang.Double> getVector() {
    return vector;
  }

  /**
   * Sets the value of the 'vector' field.
   * @param value the value to set.
   */
  public void setVector(java.util.List<java.lang.Double> value) {
    this.vector = value;
  }

  /**
   * Gets the value of the 'topics' field.
   */
  public java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary> getTopics() {
    return topics;
  }

  /**
   * Sets the value of the 'topics' field.
   * @param value the value to set.
   */
  public void setTopics(java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary> value) {
    this.topics = value;
  }

  /** Creates a new Inference RecordBuilder */
  public static es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder newBuilder() {
    return new es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder();
  }
  
  /** Creates a new Inference RecordBuilder by copying an existing Builder */
  public static es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder newBuilder(es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder other) {
    return new es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder(other);
  }
  
  /** Creates a new Inference RecordBuilder by copying an existing Inference instance */
  public static es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder newBuilder(es.upm.oeg.librairy.service.modeler.facade.model.Inference other) {
    return new es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder(other);
  }
  
  /**
   * RecordBuilder for Inference instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Inference>
    implements org.apache.avro.data.RecordBuilder<Inference> {

    private java.util.List<java.lang.Double> vector;
    private java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary> topics;

    /** Creates a new Builder */
    private Builder() {
      super(es.upm.oeg.librairy.service.modeler.facade.model.Inference.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vector)) {
        this.vector = data().deepCopy(fields()[0].schema(), other.vector);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.topics)) {
        this.topics = data().deepCopy(fields()[1].schema(), other.topics);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Inference instance */
    private Builder(es.upm.oeg.librairy.service.modeler.facade.model.Inference other) {
            super(es.upm.oeg.librairy.service.modeler.facade.model.Inference.SCHEMA$);
      if (isValidValue(fields()[0], other.vector)) {
        this.vector = data().deepCopy(fields()[0].schema(), other.vector);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.topics)) {
        this.topics = data().deepCopy(fields()[1].schema(), other.topics);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'vector' field */
    public java.util.List<java.lang.Double> getVector() {
      return vector;
    }
    
    /** Sets the value of the 'vector' field */
    public es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder setVector(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.vector = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'vector' field has been set */
    public boolean hasVector() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'vector' field */
    public es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder clearVector() {
      vector = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'topics' field */
    public java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary> getTopics() {
      return topics;
    }
    
    /** Sets the value of the 'topics' field */
    public es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder setTopics(java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary> value) {
      validate(fields()[1], value);
      this.topics = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'topics' field has been set */
    public boolean hasTopics() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'topics' field */
    public es.upm.oeg.librairy.service.modeler.facade.model.Inference.Builder clearTopics() {
      topics = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Inference build() {
      try {
        Inference record = new Inference();
        record.vector = fieldSetFlags()[0] ? this.vector : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.topics = fieldSetFlags()[1] ? this.topics : (java.util.List<es.upm.oeg.librairy.service.modeler.facade.model.TopicSummary>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
