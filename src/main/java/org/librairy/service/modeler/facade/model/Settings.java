/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.librairy.service.modeler.facade.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Settings extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Settings\",\"namespace\":\"org.librairy.service.modeler.facade.model\",\"fields\":[{\"name\":\"algorithm\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"params\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"default\":{}},{\"name\":\"stats\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String algorithm;
   private java.lang.String date;
   private java.util.Map<java.lang.String,java.lang.String> params;
   private java.util.Map<java.lang.String,java.lang.String> stats;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Settings() {}

  /**
   * All-args constructor.
   */
  public Settings(java.lang.String algorithm, java.lang.String date, java.util.Map<java.lang.String,java.lang.String> params, java.util.Map<java.lang.String,java.lang.String> stats) {
    this.algorithm = algorithm;
    this.date = date;
    this.params = params;
    this.stats = stats;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return algorithm;
    case 1: return date;
    case 2: return params;
    case 3: return stats;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: algorithm = (java.lang.String)value$; break;
    case 1: date = (java.lang.String)value$; break;
    case 2: params = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 3: stats = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'algorithm' field.
   */
  public java.lang.String getAlgorithm() {
    return algorithm;
  }

  /**
   * Sets the value of the 'algorithm' field.
   * @param value the value to set.
   */
  public void setAlgorithm(java.lang.String value) {
    this.algorithm = value;
  }

  /**
   * Gets the value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'params' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getParams() {
    return params;
  }

  /**
   * Sets the value of the 'params' field.
   * @param value the value to set.
   */
  public void setParams(java.util.Map<java.lang.String,java.lang.String> value) {
    this.params = value;
  }

  /**
   * Gets the value of the 'stats' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getStats() {
    return stats;
  }

  /**
   * Sets the value of the 'stats' field.
   * @param value the value to set.
   */
  public void setStats(java.util.Map<java.lang.String,java.lang.String> value) {
    this.stats = value;
  }

  /** Creates a new Settings RecordBuilder */
  public static org.librairy.service.modeler.facade.model.Settings.Builder newBuilder() {
    return new org.librairy.service.modeler.facade.model.Settings.Builder();
  }
  
  /** Creates a new Settings RecordBuilder by copying an existing Builder */
  public static org.librairy.service.modeler.facade.model.Settings.Builder newBuilder(org.librairy.service.modeler.facade.model.Settings.Builder other) {
    return new org.librairy.service.modeler.facade.model.Settings.Builder(other);
  }
  
  /** Creates a new Settings RecordBuilder by copying an existing Settings instance */
  public static org.librairy.service.modeler.facade.model.Settings.Builder newBuilder(org.librairy.service.modeler.facade.model.Settings other) {
    return new org.librairy.service.modeler.facade.model.Settings.Builder(other);
  }
  
  /**
   * RecordBuilder for Settings instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Settings>
    implements org.apache.avro.data.RecordBuilder<Settings> {

    private java.lang.String algorithm;
    private java.lang.String date;
    private java.util.Map<java.lang.String,java.lang.String> params;
    private java.util.Map<java.lang.String,java.lang.String> stats;

    /** Creates a new Builder */
    private Builder() {
      super(org.librairy.service.modeler.facade.model.Settings.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.librairy.service.modeler.facade.model.Settings.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.algorithm)) {
        this.algorithm = data().deepCopy(fields()[0].schema(), other.algorithm);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.params)) {
        this.params = data().deepCopy(fields()[2].schema(), other.params);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stats)) {
        this.stats = data().deepCopy(fields()[3].schema(), other.stats);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Settings instance */
    private Builder(org.librairy.service.modeler.facade.model.Settings other) {
            super(org.librairy.service.modeler.facade.model.Settings.SCHEMA$);
      if (isValidValue(fields()[0], other.algorithm)) {
        this.algorithm = data().deepCopy(fields()[0].schema(), other.algorithm);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.params)) {
        this.params = data().deepCopy(fields()[2].schema(), other.params);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stats)) {
        this.stats = data().deepCopy(fields()[3].schema(), other.stats);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'algorithm' field */
    public java.lang.String getAlgorithm() {
      return algorithm;
    }
    
    /** Sets the value of the 'algorithm' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder setAlgorithm(java.lang.String value) {
      validate(fields()[0], value);
      this.algorithm = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'algorithm' field has been set */
    public boolean hasAlgorithm() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'algorithm' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder clearAlgorithm() {
      algorithm = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'date' field */
    public java.lang.String getDate() {
      return date;
    }
    
    /** Sets the value of the 'date' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder setDate(java.lang.String value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'date' field has been set */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'date' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'params' field */
    public java.util.Map<java.lang.String,java.lang.String> getParams() {
      return params;
    }
    
    /** Sets the value of the 'params' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder setParams(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[2], value);
      this.params = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'params' field has been set */
    public boolean hasParams() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'params' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder clearParams() {
      params = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'stats' field */
    public java.util.Map<java.lang.String,java.lang.String> getStats() {
      return stats;
    }
    
    /** Sets the value of the 'stats' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder setStats(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[3], value);
      this.stats = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'stats' field has been set */
    public boolean hasStats() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'stats' field */
    public org.librairy.service.modeler.facade.model.Settings.Builder clearStats() {
      stats = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Settings build() {
      try {
        Settings record = new Settings();
        record.algorithm = fieldSetFlags()[0] ? this.algorithm : (java.lang.String) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.String) defaultValue(fields()[1]);
        record.params = fieldSetFlags()[2] ? this.params : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[2]);
        record.stats = fieldSetFlags()[3] ? this.stats : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
